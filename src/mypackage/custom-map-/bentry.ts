// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers"

export class BEntry {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): BEntry {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsBEntry(bb: flatbuffers.ByteBuffer, obj?: BEntry): BEntry {
    return (obj || new BEntry()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  static getSizePrefixedRootAsBEntry(
    bb: flatbuffers.ByteBuffer,
    obj?: BEntry,
  ): BEntry {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new BEntry()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  key(): string | null
  key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  key(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  value(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false
  }

  static startBEntry(builder: flatbuffers.Builder) {
    builder.startObject(2)
  }

  static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, keyOffset, 0)
  }

  static addValue(builder: flatbuffers.Builder, value: boolean) {
    builder.addFieldInt8(1, +value, +false)
  }

  static endBEntry(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // key
    return offset
  }

  static createBEntry(
    builder: flatbuffers.Builder,
    keyOffset: flatbuffers.Offset,
    value: boolean,
  ): flatbuffers.Offset {
    BEntry.startBEntry(builder)
    BEntry.addKey(builder, keyOffset)
    BEntry.addValue(builder, value)
    return BEntry.endBEntry(builder)
  }
}
