// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers"

export class SEntry {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): SEntry {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsSEntry(bb: flatbuffers.ByteBuffer, obj?: SEntry): SEntry {
    return (obj || new SEntry()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  static getSizePrefixedRootAsSEntry(
    bb: flatbuffers.ByteBuffer,
    obj?: SEntry,
  ): SEntry {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new SEntry()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  key(): string | null
  key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  key(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  value(): string | null
  value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  value(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null
  }

  static startSEntry(builder: flatbuffers.Builder) {
    builder.startObject(2)
  }

  static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, keyOffset, 0)
  }

  static addValue(
    builder: flatbuffers.Builder,
    valueOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, valueOffset, 0)
  }

  static endSEntry(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    builder.requiredField(offset, 4) // key
    return offset
  }

  static createSEntry(
    builder: flatbuffers.Builder,
    keyOffset: flatbuffers.Offset,
    valueOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    SEntry.startSEntry(builder)
    SEntry.addKey(builder, keyOffset)
    SEntry.addValue(builder, valueOffset)
    return SEntry.endSEntry(builder)
  }
}
