// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers"

import { BEntry } from "../mypackage/custom-map-/bentry.js"
import { DEntry } from "../mypackage/custom-map-/dentry.js"
import { LEntry } from "../mypackage/custom-map-/lentry.js"
import { SEntry } from "../mypackage/custom-map-/sentry.js"

export class CustomMap {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): CustomMap {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsCustomMap(
    bb: flatbuffers.ByteBuffer,
    obj?: CustomMap,
  ): CustomMap {
    return (obj || new CustomMap()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  static getSizePrefixedRootAsCustomMap(
    bb: flatbuffers.ByteBuffer,
    obj?: CustomMap,
  ): CustomMap {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new CustomMap()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    )
  }

  b(index: number, obj?: BEntry): BEntry | null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset
      ? (obj || new BEntry()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null
  }

  bLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  d(index: number, obj?: DEntry): DEntry | null {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset
      ? (obj || new DEntry()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null
  }

  dLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  s(index: number, obj?: SEntry): SEntry | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset
      ? (obj || new SEntry()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null
  }

  sLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  l(index: number, obj?: LEntry): LEntry | null {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset
      ? (obj || new LEntry()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null
  }

  lLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startCustomMap(builder: flatbuffers.Builder) {
    builder.startObject(4)
  }

  static addB(builder: flatbuffers.Builder, bOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, bOffset, 0)
  }

  static createBVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startBVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addD(builder: flatbuffers.Builder, dOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, dOffset, 0)
  }

  static createDVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startDVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, sOffset, 0)
  }

  static createSVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startSVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static addL(builder: flatbuffers.Builder, lOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, lOffset, 0)
  }

  static createLVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startLVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4)
  }

  static endCustomMap(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createCustomMap(
    builder: flatbuffers.Builder,
    bOffset: flatbuffers.Offset,
    dOffset: flatbuffers.Offset,
    sOffset: flatbuffers.Offset,
    lOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    CustomMap.startCustomMap(builder)
    CustomMap.addB(builder, bOffset)
    CustomMap.addD(builder, dOffset)
    CustomMap.addS(builder, sOffset)
    CustomMap.addL(builder, lOffset)
    return CustomMap.endCustomMap(builder)
  }
}
